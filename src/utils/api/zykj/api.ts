/* tslint:disable */
/* eslint-disable */
/**
 * 中育API
 * 中育的api
 *
 * The version of the OpenAPI document: 1.0
 * Contact: 3262392248@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddCatalog200Response
 */
export interface AddCatalog200Response {
    /**
     * 目录id
     * @type {number}
     * @memberof AddCatalog200Response
     */
    'result'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddCatalog200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddCatalog200Response
     */
    'success'?: number;
    /**
     * 
     * @type {ApiError}
     * @memberof AddCatalog200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof AddCatalog200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AddCatalog200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface AddCatalogRequest
 */
export interface AddCatalogRequest {
    /**
     * 
     * @type {string}
     * @memberof AddCatalogRequest
     */
    'name'?: string;
}
/**
 * 错误信息
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {number}
     * @memberof ApiError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'validationErrors'?: string;
}
/**
 * 
 * @export
 * @interface AskForHelp200Response
 */
export interface AskForHelp200Response {
    /**
     * 
     * @type {string}
     * @memberof AskForHelp200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AskForHelp200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof AskForHelp200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof AskForHelp200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AskForHelp200Response
     */
    '__abp'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof AskForHelp200Response
     */
    'result'?: object;
}
/**
 * 
 * @export
 * @interface AskForHelpRequest
 */
export interface AskForHelpRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AskForHelpRequest
     */
    'askForHelp'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AskForHelpRequest
     */
    'examTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AskForHelpRequest
     */
    'questionId'?: number;
}
/**
 * 
 * @export
 * @interface CanIOpenCamera200Response
 */
export interface CanIOpenCamera200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CanIOpenCamera200Response
     */
    'result'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CanIOpenCamera200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CanIOpenCamera200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof CanIOpenCamera200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof CanIOpenCamera200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CanIOpenCamera200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface CheckUpdate200Response
 */
export interface CheckUpdate200Response {
    /**
     * 
     * @type {CheckUpdate200ResponseResult}
     * @memberof CheckUpdate200Response
     */
    'result'?: CheckUpdate200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUpdate200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof CheckUpdate200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUpdate200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUpdate200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface CheckUpdate200ResponseResult
 */
export interface CheckUpdate200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'appVersionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'packageName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'creationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'creatorUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'downloads'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'fileUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUpdate200ResponseResult
     */
    'forceUpdate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'versionCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'versionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckUpdate200ResponseResult
     */
    'appType'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUpdate200ResponseResult
     */
    'disabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdate200ResponseResult
     */
    'lastModificationTime'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClientType = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ClientType = typeof ClientType[keyof typeof ClientType];


/**
 * 
 * @export
 * @interface CoursesSubscribed200Response
 */
export interface CoursesSubscribed200Response {
    /**
     * 
     * @type {Array<CoursesSubscribed200ResponseResultInner>}
     * @memberof CoursesSubscribed200Response
     */
    'result'?: Array<CoursesSubscribed200ResponseResultInner>;
}
/**
 * 
 * @export
 * @interface CoursesSubscribed200ResponseResultInner
 */
export interface CoursesSubscribed200ResponseResultInner {
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'id'?: number;
    /**
     * 
     * @type {CoursesSubscribed200ResponseResultInnerTeacherUsers}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'teacherUsers'?: CoursesSubscribed200ResponseResultInnerTeacherUsers;
    /**
     * 
     * @type {CoursesSubscribed200ResponseResultInnerTopics}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'topics'?: CoursesSubscribed200ResponseResultInnerTopics;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'classRoomId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'subscribers'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'createUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'createTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'state'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'editUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInner
     */
    'editTime'?: string;
}
/**
 * 
 * @export
 * @interface CoursesSubscribed200ResponseResultInnerTeacherUsers
 */
export interface CoursesSubscribed200ResponseResultInnerTeacherUsers {
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTeacherUsers
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInnerTeacherUsers
     */
    'fullName'?: string;
}
/**
 * 
 * @export
 * @interface CoursesSubscribed200ResponseResultInnerTopics
 */
export interface CoursesSubscribed200ResponseResultInnerTopics {
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'sort'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'system'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'platformId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'lastModifierUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'creationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'creatorUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoursesSubscribed200ResponseResultInnerTopics
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface CreateSession200Response
 */
export interface CreateSession200Response {
    /**
     * id
     * @type {number}
     * @memberof CreateSession200Response
     */
    'result'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateSession200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSession200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof CreateSession200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSession200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSession200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'snapshot'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'summary'?: string;
}
/**
 * 
 * @export
 * @interface ExamAnswerRequest
 */
export interface ExamAnswerRequest {
    /**
     * 
     * @type {Array<ExamAnswerRequestAnswersInner>}
     * @memberof ExamAnswerRequest
     */
    'answers'?: Array<ExamAnswerRequestAnswersInner>;
    /**
     * 
     * @type {string}
     * @memberof ExamAnswerRequest
     */
    'draft'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExamAnswerRequest
     */
    'questionId'?: number;
}
/**
 * 
 * @export
 * @interface ExamAnswerRequestAnswersInner
 */
export interface ExamAnswerRequestAnswersInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof ExamAnswerRequestAnswersInner
     */
    'answers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExamAnswerRequestAnswersInner
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface GeneratorToken200Response
 */
export interface GeneratorToken200Response {
    /**
     * 
     * @type {GeneratorToken200ResponseResult}
     * @memberof GeneratorToken200Response
     */
    'result'?: GeneratorToken200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GeneratorToken200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GeneratorToken200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GeneratorToken200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneratorToken200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GeneratorToken200ResponseResult
 */
export interface GeneratorToken200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'strategy'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'bucket'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'endpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'accessKeySecret'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'securityToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorToken200ResponseResult
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface GetAllCommonWebSite200Response
 */
export interface GetAllCommonWebSite200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAllCommonWebSite200Response
     */
    'result'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetAllCommonWebSite200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllCommonWebSite200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetAllCommonWebSite200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllCommonWebSite200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllCommonWebSite200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetAllSettings200Response
 */
export interface GetAllSettings200Response {
    /**
     * 
     * @type {GetAllSettings200ResponseResult}
     * @memberof GetAllSettings200Response
     */
    'result'?: GetAllSettings200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllSettings200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetAllSettings200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllSettings200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllSettings200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetAllSettings200ResponseResult
 */
export interface GetAllSettings200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'schoolName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'schoolShortName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'systemName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'stuNumLength'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'backgroundImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'icon'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAllSettings200ResponseResult
     */
    'stageIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'xkwOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'dnOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'newDeviceSmsAuthentication'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'studentSelectActivity'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'studentSatisfaction'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'qq'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'wechat'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'telephone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllSettings200ResponseResult
     */
    'mobile'?: string;
}
/**
 * 
 * @export
 * @interface GetAllWhiteUrlAsync200Response
 */
export interface GetAllWhiteUrlAsync200Response {
    /**
     * 加密过
     * @type {string}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllWhiteUrlAsync200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetCatalogs200Response
 */
export interface GetCatalogs200Response {
    /**
     * 
     * @type {Array<GetCatalogs200ResponseResultInner>}
     * @memberof GetCatalogs200Response
     */
    'result'?: Array<GetCatalogs200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetCatalogs200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetCatalogs200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetCatalogs200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetCatalogs200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetCatalogs200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetCatalogs200ResponseResultInner
 */
export interface GetCatalogs200ResponseResultInner {
    /**
     * 
     * @type {number}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'hasNewMsgs'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'newMsgCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'hasNewParimaryMsgs'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'newParimarMsgCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCatalogs200ResponseResultInner
     */
    'sort'?: number;
}
/**
 * 
 * @export
 * @interface GetDnUrl200Response
 */
export interface GetDnUrl200Response {
    /**
     * 
     * @type {string}
     * @memberof GetDnUrl200Response
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDnUrl200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetDnUrl200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetDnUrl200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetDnUrl200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetDnUrl200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetExamTask200Response
 */
export interface GetExamTask200Response {
    /**
     * 
     * @type {GetExamTask200ResponseResult}
     * @memberof GetExamTask200Response
     */
    'result'?: GetExamTask200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200Response
     */
    'targetUrl'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetExamTask200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetExamTask200ResponseResult
 */
export interface GetExamTask200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'address'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResult
     */
    'answerPad'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResult
     */
    'answerSheet'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'answerSheetId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'answeringUrge'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResult
     */
    'correctOnline'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'correctOnlineState'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResult
     */
    'correctWithSelf'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'creationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'displayAnswer'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResult
     */
    'enableScore'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'examId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'examName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'examState'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'examTips'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResult
     */
    'gradeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResult
     */
    'gradeName'?: string;
    /**
     * 
     * @type {Array<GetExamTask200ResponseResultGroupsInner>}
     * @memberof GetExamTask200ResponseResult
     */
    'groups'?: Array<GetExamTask200ResponseResultGroupsInner>;
}
/**
 * 
 * @export
 * @interface GetExamTask200ResponseResultGroupsInner
 */
export interface GetExamTask200ResponseResultGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'myScore'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'qstCount'?: number;
    /**
     * 
     * @type {Array<GetExamTask200ResponseResultGroupsInnerQuestionsInner>}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'questions'?: Array<GetExamTask200ResponseResultGroupsInnerQuestionsInner>;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'score'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResultGroupsInner
     */
    'showGroupNumber'?: boolean;
}
/**
 * 
 * @export
 * @interface GetExamTask200ResponseResultGroupsInnerQuestionsInner
 */
export interface GetExamTask200ResponseResultGroupsInnerQuestionsInner {
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'askForHelp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'completed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'hasMicroClass'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'itemType'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'myScore'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'originScore'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'relatedGroupId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'revisingResult'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExamTask200ResponseResultGroupsInnerQuestionsInner
     */
    'state'?: number;
}
/**
 * 
 * @export
 * @interface GetMistakeQstItemDetailInfo200Response
 */
export interface GetMistakeQstItemDetailInfo200Response {
    /**
     * 
     * @type {GetMistakeQstItemDetailInfo200ResponseResult}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    'result'?: GetMistakeQstItemDetailInfo200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMistakeQstItemDetailInfo200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMistakeQstItemDetailInfo200ResponseResult
 */
export interface GetMistakeQstItemDetailInfo200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'questionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'examId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'name'?: string;
    /**
     * 
     * @type {Array<QstFlow>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'qstFlows'?: Array<QstFlow>;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'qstPath'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'attachments'?: Array<string>;
    /**
     * 
     * @type {Array<GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'answerInfos'?: Array<GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner>;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'revisingResult'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'microClassToQuestionList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'microClassToStudentList'?: Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'typicalErrorAnswers'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'typicalRightAnswers'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'itemType'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'isShowAnswer'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'isShowMicroLesson'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'itemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'bookId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'extraStems'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'diff'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'attainedLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'errorReason'?: number;
    /**
     * 
     * @type {Array<GetMyTags200ResponseResultInner>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'mistakeTags'?: Array<GetMyTags200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'note'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResult
     */
    'pictureNote'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
 */
export interface GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner {
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'result'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'examAnswers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'examComments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'examMicroLessonComment'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'revisingAnswers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'reviseMicroLessonComment'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetMistakeQstItemDetailInfo200ResponseResultAnswerInfosInner
     */
    'revisingComments'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetMyMessageList200Response
 */
export interface GetMyMessageList200Response {
    /**
     * 
     * @type {GetMyMessageList200ResponseResult}
     * @memberof GetMyMessageList200Response
     */
    'result'?: GetMyMessageList200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMessageList200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetMyMessageList200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMessageList200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMessageList200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyMessageList200ResponseResult
 */
export interface GetMyMessageList200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<GetMyMessageList200ResponseResultItemsInner>}
     * @memberof GetMyMessageList200ResponseResult
     */
    'items'?: Array<GetMyMessageList200ResponseResultItemsInner>;
}
/**
 * 
 * @export
 * @interface GetMyMessageList200ResponseResultItemsInner
 */
export interface GetMyMessageList200ResponseResultItemsInner {
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'type'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'isRead'?: boolean;
    /**
     * 
     * @type {GetMyMessageList200ResponseResultItemsInnerParameter}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'parameter'?: GetMyMessageList200ResponseResultItemsInnerParameter;
    /**
     * 
     * @type {GetMyMessageList200ResponseResultItemsInnerSenderInfo}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'senderInfo'?: GetMyMessageList200ResponseResultItemsInnerSenderInfo;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'deleterUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'lastModifierUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'creationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'creatorUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResultItemsInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetMyMessageList200ResponseResultItemsInnerParameter
 */
export interface GetMyMessageList200ResponseResultItemsInnerParameter {
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResultItemsInnerParameter
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetMyMessageList200ResponseResultItemsInnerSenderInfo
 */
export interface GetMyMessageList200ResponseResultItemsInnerSenderInfo {
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInnerSenderInfo
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageList200ResponseResultItemsInnerSenderInfo
     */
    'gender'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMyMessageList200ResponseResultItemsInnerSenderInfo
     */
    'picture'?: string;
    /**
     * 
     * @type {RoleType}
     * @memberof GetMyMessageList200ResponseResultItemsInnerSenderInfo
     */
    'roleType'?: RoleType;
}


/**
 * 
 * @export
 * @interface GetMyMessageListRequest
 */
export interface GetMyMessageListRequest {
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageListRequest
     */
    'maxResultCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageListRequest
     */
    'skipCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMessageListRequest
     */
    'type'?: number;
}
/**
 * 
 * @export
 * @interface GetMyMistakeBooks200Response
 */
export interface GetMyMistakeBooks200Response {
    /**
     * 
     * @type {Array<GetMyMistakeBooks200ResponseResultInner>}
     * @memberof GetMyMistakeBooks200Response
     */
    'result'?: Array<GetMyMistakeBooks200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMyMistakeBooks200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMistakeBooks200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetMyMistakeBooks200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMistakeBooks200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMistakeBooks200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyMistakeBooks200ResponseResultInner
 */
export interface GetMyMistakeBooks200ResponseResultInner {
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'topicId'?: number;
    /**
     * 
     * @type {GetMyMistakeBooks200ResponseResultInnerTopic}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'topic'?: GetMyMistakeBooks200ResponseResultInnerTopic;
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'studentUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'newQstCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'totalQstCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetMyMistakeBooks200ResponseResultInnerTopic
 */
export interface GetMyMistakeBooks200ResponseResultInnerTopic {
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInnerTopic
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetMyMistakeBooks200ResponseResultInnerTopic
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMyMistakeBooks200ResponseResultInnerTopic
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMyMistakeBooks200ResponseResultInnerTopic
     */
    'sort'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyMistakeBooks200ResponseResultInnerTopic
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyTags200Response
 */
export interface GetMyTags200Response {
    /**
     * 
     * @type {Array<GetMyTags200ResponseResultInner>}
     * @memberof GetMyTags200Response
     */
    'result'?: Array<GetMyTags200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMyTags200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyTags200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetMyTags200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyTags200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyTags200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyTags200ResponseResultInner
 */
export interface GetMyTags200ResponseResultInner {
    /**
     * 
     * @type {string}
     * @memberof GetMyTags200ResponseResultInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMyTags200ResponseResultInner
     */
    'bindItemCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyTags200ResponseResultInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetMyUnreadMessageCount200Response
 */
export interface GetMyUnreadMessageCount200Response {
    /**
     * 
     * @type {Array<GetMyUnreadMessageCount200ResponseResultInner>}
     * @memberof GetMyUnreadMessageCount200Response
     */
    'result'?: Array<GetMyUnreadMessageCount200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetMyUnreadMessageCount200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyUnreadMessageCount200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetMyUnreadMessageCount200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyUnreadMessageCount200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMyUnreadMessageCount200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMyUnreadMessageCount200ResponseResultInner
 */
export interface GetMyUnreadMessageCount200ResponseResultInner {
    /**
     * 
     * @type {number}
     * @memberof GetMyUnreadMessageCount200ResponseResultInner
     */
    'type'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetMyUnreadMessageCount200ResponseResultInner
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface GetNoQstExam200Response
 */
export interface GetNoQstExam200Response {
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetNoQstExam200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200Response
     */
    '__abp'?: boolean;
    /**
     * 
     * @type {GetNoQstExam200ResponseResult}
     * @memberof GetNoQstExam200Response
     */
    'result'?: GetNoQstExam200ResponseResult;
}
/**
 * 
 * @export
 * @interface GetNoQstExam200ResponseResult
 */
export interface GetNoQstExam200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'address'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'answerPad'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'answerSheet'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'answerSheetId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'answeringUrge'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'correctOnline'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'correctOnlineState'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'correctWithSelf'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'creationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'displayAnswer'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'enableScore'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'examId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'examName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'examState'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'examTips'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'gradeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'gradeName'?: string;
    /**
     * 
     * @type {Array<GetNoQstExam200ResponseResultGroupsInner>}
     * @memberof GetNoQstExam200ResponseResult
     */
    'groups'?: Array<GetNoQstExam200ResponseResultGroupsInner>;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'isExempted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'isRead'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'isRepresentative'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'myScore'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResult
     */
    'noQstStem'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'qstCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'revisingUrge'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'serialNum'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'specificTrainingType'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'startTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'state'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'studentUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'teacherUserId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'testDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'testPagerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'testPagerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'testTips'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'topicId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResult
     */
    'topicName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'whenShowAnswer'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResult
     */
    'whenShowMicroLesson'?: number;
}
/**
 * 
 * @export
 * @interface GetNoQstExam200ResponseResultGroupsInner
 */
export interface GetNoQstExam200ResponseResultGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'myScore'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'number'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'qstCount'?: number;
    /**
     * 
     * @type {Array<GetNoQstExam200ResponseResultGroupsInnerQuestionsInner>}
     * @memberof GetNoQstExam200ResponseResultGroupsInner
     */
    'questions'?: Array<GetNoQstExam200ResponseResultGroupsInnerQuestionsInner>;
}
/**
 * 
 * @export
 * @interface GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
 */
export interface GetNoQstExam200ResponseResultGroupsInnerQuestionsInner {
    /**
     * 
     * @type {Array<GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner>}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'answerList'?: Array<GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'answerWithQuestion'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'askForHelp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'completed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'myScore'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'number'?: number;
    /**
     * 
     * @type {Array<QstFlow>}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'qstFlows'?: Array<QstFlow>;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInner
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner
 */
export interface GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner
     */
    'answers'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner
     */
    'pid'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GetNoQstExam200ResponseResultGroupsInnerQuestionsInnerAnswerListInner
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface GetNotice200Response
 */
export interface GetNotice200Response {
    /**
     * 
     * @type {GetNotice200ResponseResult}
     * @memberof GetNotice200Response
     */
    'result'?: GetNotice200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetNotice200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetNotice200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetNotice200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetNotice200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetNotice200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetNotice200ResponseResult
 */
export interface GetNotice200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetNotice200ResponseResult
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNotice200ResponseResult
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetNotice200ResponseResult
     */
    'type'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNotice200ResponseResult
     */
    'targetCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNotice200ResponseResult
     */
    'readCount'?: number;
}
/**
 * 
 * @export
 * @interface GetQWeather200Response
 */
export interface GetQWeather200Response {
    /**
     * 
     * @type {GetQWeather200ResponseResult}
     * @memberof GetQWeather200Response
     */
    'result'?: GetQWeather200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetQWeather200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetQWeather200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetQWeather200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetQWeather200Response
     */
    '__adp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetQWeather200ResponseResult
 */
export interface GetQWeather200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResult
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResult
     */
    'updateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResult
     */
    'fxLink'?: string;
    /**
     * 
     * @type {GetQWeather200ResponseResultDaily}
     * @memberof GetQWeather200ResponseResult
     */
    'daily'?: GetQWeather200ResponseResultDaily;
}
/**
 * 
 * @export
 * @interface GetQWeather200ResponseResultDaily
 */
export interface GetQWeather200ResponseResultDaily {
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'fxDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'tempMax'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'tempMin'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'iconDay'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'textDay'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'iconNight'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'textNight'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'windDirDay'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'windScaleDay'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'windDirNight'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQWeather200ResponseResultDaily
     */
    'windScaleNight'?: string;
}
/**
 * 
 * @export
 * @interface GetQuestionView200Response
 */
export interface GetQuestionView200Response {
    /**
     * 
     * @type {GetQuestionView200ResponseResult}
     * @memberof GetQuestionView200Response
     */
    'result'?: GetQuestionView200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200Response
     */
    'targetUrl'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetQuestionView200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetQuestionView200ResponseResult
 */
export interface GetQuestionView200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'attachments'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'qstAnswers'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'analysis'?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetQuestionView200ResponseResult
     */
    'microClassToQuestionList'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetQuestionView200ResponseResult
     */
    'microClassToStudentList'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'examDraft'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'revisingDraft'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'revisingResult'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200ResponseResult
     */
    'examAnswered'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200ResponseResult
     */
    'revisingAnswerd'?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof GetQuestionView200ResponseResult
     */
    'lastRoundRevisingRecords'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'typicalRightAnswers'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'typicalErrorAnswers'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200ResponseResult
     */
    'isInMistakeBook'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200ResponseResult
     */
    'askForHelp'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'path'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'itemType'?: number;
    /**
     * 
     * @type {Array<QstFlow>}
     * @memberof GetQuestionView200ResponseResult
     */
    'qstFlows'?: Array<QstFlow>;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'qstFlowsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'totalScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'totalAnswerScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'originScore'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetQuestionView200ResponseResult
     */
    'answerWithQuestion'?: boolean;
    /**
     * 
     * @type {Array<GetQuestionView200ResponseResultAnswerListInner>}
     * @memberof GetQuestionView200ResponseResult
     */
    'answerList'?: Array<GetQuestionView200ResponseResultAnswerListInner>;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResult
     */
    'microClassList'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResult
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetQuestionView200ResponseResultAnswerListInner
 */
export interface GetQuestionView200ResponseResultAnswerListInner {
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'number'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'examAnswers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'examComments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'examMicroLessonComment'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'revisingAnswers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'revisingComments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'reviseMicroLessonComment'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'originScore'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'result'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'originResult'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'displayAnswer'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'whenShowAnswer'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'whenShowMicroLesson'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'examState'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuestionView200ResponseResultAnswerListInner
     */
    'taskState'?: number;
}
/**
 * 
 * @export
 * @interface GetQuoraStudentTopicsRequest
 */
export interface GetQuoraStudentTopicsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'Integer'?: number;
    /**
     * 
     * @type {GetQuoraStudentTopicsRequestJoinTime}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'joinTime'?: GetQuoraStudentTopicsRequestJoinTime;
    /**
     * 
     * @type {Array<number>}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'justWatch'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'orderBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'take'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetQuoraStudentTopicsRequest
     */
    'topicId'?: number;
}
/**
 * 
 * @export
 * @interface GetQuoraStudentTopicsRequestJoinTime
 */
export interface GetQuoraStudentTopicsRequestJoinTime {
    /**
     * 
     * @type {string}
     * @memberof GetQuoraStudentTopicsRequestJoinTime
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetQuoraStudentTopicsRequestJoinTime
     */
    'start'?: string;
}
/**
 * 
 * @export
 * @interface GetSessions200Response
 */
export interface GetSessions200Response {
    /**
     * 
     * @type {Array<GetSessions200ResponseResultInner>}
     * @memberof GetSessions200Response
     */
    'result'?: Array<GetSessions200ResponseResultInner>;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetSessions200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetSessions200ResponseResultInner
 */
export interface GetSessions200ResponseResultInner {
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'cleared'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200ResponseResultInner
     */
    'closed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'courseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'createTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'askUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'members'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'messages'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'snapshot'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'updateUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'sessionRole'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'unRead'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'primaryUnRead'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'sentMessages'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'openCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'state'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'joinType'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'joinTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'askUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'updateUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'askUserPhoto'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'updateUserPhoto'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200ResponseResultInner
     */
    'disabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'class'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSessions200ResponseResultInner
     */
    'topicName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSessions200ResponseResultInner
     */
    'isCollect'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'searched'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessions200ResponseResultInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetSessionsRequest
 */
export interface GetSessionsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetSessionsRequest
     */
    'catalogId'?: number;
    /**
     * 
     * @type {TimeFrame}
     * @memberof GetSessionsRequest
     */
    'joinTime'?: TimeFrame;
    /**
     * 
     * @type {Array<number>}
     * @memberof GetSessionsRequest
     */
    'justWatch'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof GetSessionsRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetSessionsRequest
     */
    'orderBy'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessionsRequest
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessionsRequest
     */
    'take'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetSessionsRequest
     */
    'topicId'?: number;
    /**
     * 
     * @type {TimeFrame}
     * @memberof GetSessionsRequest
     */
    'updateTime'?: TimeFrame;
}
/**
 * 
 * @export
 * @interface GetStudentTaskList200Response
 */
export interface GetStudentTaskList200Response {
    /**
     * 
     * @type {GetStudentTaskList200ResponseResult}
     * @memberof GetStudentTaskList200Response
     */
    'result'?: GetStudentTaskList200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetStudentTaskList200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetStudentTaskList200ResponseResult
 */
export interface GetStudentTaskList200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<GetStudentTaskList200ResponseResultItemsInner>}
     * @memberof GetStudentTaskList200ResponseResult
     */
    'items'?: Array<GetStudentTaskList200ResponseResultItemsInner>;
}
/**
 * 
 * @export
 * @interface GetStudentTaskList200ResponseResultItemsInner
 */
export interface GetStudentTaskList200ResponseResultItemsInner {
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'address'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'answerPad'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'answerSheet'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'answeringUrge'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'correctOnline'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'correctOnlineState'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'correctWithSelf'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'examId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'examName'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'examState'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'examTaskId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'isCollect'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'isExempted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'isNoStem'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'isRead'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'revisingUrge'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'serialNum'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'specificTrainingType'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'startTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'taskState'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'testPagerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'topicId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStudentTaskList200ResponseResultItemsInner
     */
    'topicName'?: string;
}
/**
 * 
 * @export
 * @interface GetStudentTaskListRequest
 */
export interface GetStudentTaskListRequest {
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskListRequest
     */
    'maxResultCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskListRequest
     */
    'skipCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStudentTaskListRequest
     */
    'taskListType'?: number;
}
/**
 * 
 * @export
 * @interface GetSystemSettingsForStudent200Response
 */
export interface GetSystemSettingsForStudent200Response {
    /**
     * 
     * @type {GetSystemSettingsForStudent200ResponseResult}
     * @memberof GetSystemSettingsForStudent200Response
     */
    'result'?: GetSystemSettingsForStudent200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof GetSystemSettingsForStudent200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetSystemSettingsForStudent200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof GetSystemSettingsForStudent200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof GetSystemSettingsForStudent200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetSystemSettingsForStudent200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetSystemSettingsForStudent200ResponseResult
 */
export interface GetSystemSettingsForStudent200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetSystemSettingsForStudent200ResponseResult
     */
    'studentSelectActivity'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSystemSettingsForStudent200ResponseResult
     */
    'studentSatisfaction'?: string;
}
/**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * 
     * @type {Login200ResponseResult}
     * @memberof Login200Response
     */
    'result'?: Login200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof Login200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Login200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof Login200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof Login200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Login200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface Login200ResponseResult
 */
export interface Login200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof Login200ResponseResult
     */
    'clientCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login200ResponseResult
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login200ResponseResult
     */
    'rongCloudToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof Login200ResponseResult
     */
    'expireInSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof Login200ResponseResult
     */
    'userId'?: number;
    /**
     * 
     * @type {RoleType}
     * @memberof Login200ResponseResult
     */
    'roleType'?: RoleType;
    /**
     * 
     * @type {string}
     * @memberof Login200ResponseResult
     */
    'mobile'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Login200ResponseResult
     */
    'needChangePwd'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Login200ResponseResult
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof Login200ResponseResult
     */
    'refreshExpireInSeconds'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Login200ResponseResult
     */
    'needSmsVerification'?: boolean;
}


/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {number}
     * @memberof LoginRequest
     */
    'clientType'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'userName'?: string;
}
/**
 * 
 * @export
 * @interface MultiRemoveMistakeItemsRequest
 */
export interface MultiRemoveMistakeItemsRequest {
    /**
     * 
     * @type {number}
     * @memberof MultiRemoveMistakeItemsRequest
     */
    'bookId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof MultiRemoveMistakeItemsRequest
     */
    'itemIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface NoQstExamAnswerRequestInner
 */
export interface NoQstExamAnswerRequestInner {
    /**
     * 
     * @type {Array<NoQstExamAnswerRequestInnerAnswersInner>}
     * @memberof NoQstExamAnswerRequestInner
     */
    'answers'?: Array<NoQstExamAnswerRequestInnerAnswersInner>;
    /**
     * 
     * @type {string}
     * @memberof NoQstExamAnswerRequestInner
     */
    'draft'?: string;
    /**
     * 
     * @type {number}
     * @memberof NoQstExamAnswerRequestInner
     */
    'questionId'?: number;
}
/**
 * 
 * @export
 * @interface NoQstExamAnswerRequestInnerAnswersInner
 */
export interface NoQstExamAnswerRequestInnerAnswersInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof NoQstExamAnswerRequestInnerAnswersInner
     */
    'answers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof NoQstExamAnswerRequestInnerAnswersInner
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface QstFlow
 */
export interface QstFlow {
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'type'?: number;
    /**
     * 
     * @type {Array<QstFlow>}
     * @memberof QstFlow
     */
    'subQuestions'?: Array<QstFlow>;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'missScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof QstFlow
     */
    'uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'qstType'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof QstFlow
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'getScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof QstFlow
     */
    'originScore'?: number;
}
/**
 * 
 * @export
 * @interface RecordPictures200Response
 */
export interface RecordPictures200Response {
    /**
     * 
     * @type {string}
     * @memberof RecordPictures200Response
     */
    'result'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RecordPictures200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RecordPictures200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {ApiError}
     * @memberof RecordPictures200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof RecordPictures200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecordPictures200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface RecordPicturesRequest
 */
export interface RecordPicturesRequest {
    /**
     * 
     * @type {string}
     * @memberof RecordPicturesRequest
     */
    'appName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordPicturesRequest
     */
    'packageName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordPicturesRequest
     */
    'pictures'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleType = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_9: 9
} as const;

export type RoleType = typeof RoleType[keyof typeof RoleType];


/**
 * 
 * @export
 * @interface SearchMistakeQstItems200Response
 */
export interface SearchMistakeQstItems200Response {
    /**
     * 
     * @type {SearchMistakeQstItems200ResponseResult}
     * @memberof SearchMistakeQstItems200Response
     */
    'result'?: SearchMistakeQstItems200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof SearchMistakeQstItems200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItems200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof SearchMistakeQstItems200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItems200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItems200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchMistakeQstItems200ResponseResult
 */
export interface SearchMistakeQstItems200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<SearchMistakeQstItems200ResponseResultItemsInner>}
     * @memberof SearchMistakeQstItems200ResponseResult
     */
    'items'?: Array<SearchMistakeQstItems200ResponseResultItemsInner>;
}
/**
 * 
 * @export
 * @interface SearchMistakeQstItems200ResponseResultItemsInner
 */
export interface SearchMistakeQstItems200ResponseResultItemsInner {
    /**
     * 
     * @type {string}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'stemShoot'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'hasStem'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'diff'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'attainedLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'errorReason'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'tagNames'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'isRelatedQstGroup'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItems200ResponseResultItemsInner
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface SearchMistakeQstItemsRequest
 */
export interface SearchMistakeQstItemsRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof SearchMistakeQstItemsRequest
     */
    'attainedLevel'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItemsRequest
     */
    'bookId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof SearchMistakeQstItemsRequest
     */
    'diff'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof SearchMistakeQstItemsRequest
     */
    'errorReason'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItemsRequest
     */
    'haveNoTag'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchMistakeQstItemsRequest
     */
    'maxResultCount'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchMistakeQstItemsRequest
     */
    'skipCount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchMistakeQstItemsRequest
     */
    'tagIdList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchQuora200Response
 */
export interface SearchQuora200Response {
    /**
     * 
     * @type {Array<object>}
     * @memberof SearchQuora200Response
     */
    'result'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof SearchQuora200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchQuora200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof SearchQuora200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof SearchQuora200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchQuora200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchQuoraRequest
 */
export interface SearchQuoraRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchQuoraRequest
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface SetMessageRead200Response
 */
export interface SetMessageRead200Response {
    /**
     * 
     * @type {object}
     * @memberof SetMessageRead200Response
     */
    'result'?: object;
    /**
     * 
     * @type {string}
     * @memberof SetMessageRead200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SetMessageRead200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof SetMessageRead200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof SetMessageRead200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SetMessageRead200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface TimeFrame
 */
export interface TimeFrame {
    /**
     * 
     * @type {string}
     * @memberof TimeFrame
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeFrame
     */
    'start'?: string;
}
/**
 * 
 * @export
 * @interface TokenAuthRefreshTokenPost200Response
 */
export interface TokenAuthRefreshTokenPost200Response {
    /**
     * 
     * @type {TokenAuthRefreshTokenPost200ResponseResult}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    'result'?: TokenAuthRefreshTokenPost200ResponseResult;
    /**
     * 
     * @type {string}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    'targetUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {ApiError}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    'error'?: ApiError;
    /**
     * 
     * @type {boolean}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    'unAuthorizedRequest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TokenAuthRefreshTokenPost200Response
     */
    '__abp'?: boolean;
}
/**
 * 
 * @export
 * @interface TokenAuthRefreshTokenPost200ResponseResult
 */
export interface TokenAuthRefreshTokenPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof TokenAuthRefreshTokenPost200ResponseResult
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenAuthRefreshTokenPost200ResponseResult
     */
    'expireInSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenAuthRefreshTokenPost200ResponseResult
     */
    'refreshExpireInSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenAuthRefreshTokenPost200ResponseResult
     */
    'refreshToken'?: string;
}

/**
 * ManageApi - axios parameter creator
 * @export
 */
export const ManageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取打开摄像头权限
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canIOpenCamera: async (appName: string = 'WebApp', appVersion: number = 0, packageName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('canIOpenCamera', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('canIOpenCamera', 'appVersion', appVersion)
            const localVarPath = `/services/app/StoreAppControl/CanIOpenCameraAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查更新
         * @param {string} [packageName] 
         * @param {number} [appType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUpdate: async (packageName?: string, appType?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/app/AppStore/CheckUpdateAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }

            if (appType !== undefined) {
                localVarQueryParameter['appType'] = appType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订阅课程
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesSubscribed: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('coursesSubscribed', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('coursesSubscribed', 'appVersion', appVersion)
            const localVarPath = `/services/app/StudentUser/CoursesSubscribed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生成OSS令牌
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatorToken: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('generatorToken', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('generatorToken', 'appVersion', appVersion)
            const localVarPath = `/services/app/ObjectStorage/GeneratorTokenAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 不知道是干什么的(^^;
         * @summary 获取共同的网址
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommonWebSite: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getAllCommonWebSite', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getAllCommonWebSite', 'appVersion', appVersion)
            const localVarPath = `/services/app/WebWhiteList/GetAllCommonWebSiteAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSettings: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getAllSettings', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getAllSettings', 'appVersion', appVersion)
            const localVarPath = `/services/app/Setting/GetAllSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取白名单
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWhiteUrlAsync: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getAllWhiteUrlAsync', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getAllWhiteUrlAsync', 'appVersion', appVersion)
            const localVarPath = `/services/app/WebWhiteList/GetAllWhiteUrlAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetMyMessageListRequest} [getMyMessageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMessageList: async (appName: string = 'WebApp', appVersion: number = 0, getMyMessageListRequest?: GetMyMessageListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getMyMessageList', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getMyMessageList', 'appVersion', appVersion)
            const localVarPath = `/services/app/Message/GetMyMessageListAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getMyMessageListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取未读消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUnreadMessageCount: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getMyUnreadMessageCount', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getMyUnreadMessageCount', 'appVersion', appVersion)
            const localVarPath = `/services/app/Message/GetMyUnreadMessageCountAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取通知
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotice: async (appName: string = 'WebApp', appVersion: number = 0, id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getNotice', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getNotice', 'appVersion', appVersion)
            const localVarPath = `/services/app/Notice/GetNoticeAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取学生设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSettingsForStudent: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getSystemSettingsForStudent', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getSystemSettingsForStudent', 'appVersion', appVersion)
            const localVarPath = `/services/app/Setting/GetSystemSettingsForStudentAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登陆
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TokenAuth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 记录图片
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {RecordPicturesRequest} [recordPicturesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPictures: async (appName: string = 'WebApp', appVersion: number = 0, recordPicturesRequest?: RecordPicturesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('recordPictures', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('recordPictures', 'appVersion', appVersion)
            const localVarPath = `/services/app/StoreAppControl/RecordPicturesAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordPicturesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置消息已读
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMessageRead: async (appName: string = 'WebApp', appVersion: number = 0, messageId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('setMessageRead', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('setMessageRead', 'appVersion', appVersion)
            const localVarPath = `/services/app/Message/SetMessageReadAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['messageId'] = messageId;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刷新token
         * @param {string} refreshToken refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthRefreshTokenPost: async (refreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('tokenAuthRefreshTokenPost', 'refreshToken', refreshToken)
            const localVarPath = `/TokenAuth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (refreshToken != null) {
                localVarHeaderParameter['refreshToken'] = String(refreshToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManageApi - functional programming interface
 * @export
 */
export const ManageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取打开摄像头权限
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async canIOpenCamera(appName: string = 'WebApp', appVersion: number = 0, packageName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CanIOpenCamera200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.canIOpenCamera(appName, appVersion, packageName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.canIOpenCamera']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 检查更新
         * @param {string} [packageName] 
         * @param {number} [appType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUpdate(packageName?: string, appType?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckUpdate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUpdate(packageName, appType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.checkUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取订阅课程
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesSubscribed(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursesSubscribed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesSubscribed(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.coursesSubscribed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 生成OSS令牌
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatorToken(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratorToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatorToken(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.generatorToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 不知道是干什么的(^^;
         * @summary 获取共同的网址
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCommonWebSite(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllCommonWebSite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCommonWebSite(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getAllCommonWebSite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取所有设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSettings(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllSettings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSettings(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getAllSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取白名单
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWhiteUrlAsync(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllWhiteUrlAsync200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWhiteUrlAsync(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getAllWhiteUrlAsync']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetMyMessageListRequest} [getMyMessageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyMessageList(appName: string = 'WebApp', appVersion: number = 0, getMyMessageListRequest?: GetMyMessageListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyMessageList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyMessageList(appName, appVersion, getMyMessageListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getMyMessageList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取未读消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyUnreadMessageCount(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyUnreadMessageCount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyUnreadMessageCount(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getMyUnreadMessageCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取通知
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotice(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNotice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotice(appName, appVersion, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getNotice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取学生设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemSettingsForStudent(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemSettingsForStudent200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemSettingsForStudent(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.getSystemSettingsForStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 登陆
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 记录图片
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {RecordPicturesRequest} [recordPicturesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordPictures(appName: string = 'WebApp', appVersion: number = 0, recordPicturesRequest?: RecordPicturesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordPictures200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordPictures(appName, appVersion, recordPicturesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.recordPictures']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 设置消息已读
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMessageRead(appName: string = 'WebApp', appVersion: number = 0, messageId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetMessageRead200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMessageRead(appName, appVersion, messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.setMessageRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 刷新token
         * @param {string} refreshToken refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenAuthRefreshTokenPost(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthRefreshTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAuthRefreshTokenPost(refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManageApi.tokenAuthRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManageApi - factory interface
 * @export
 */
export const ManageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManageApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取打开摄像头权限
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canIOpenCamera(appName: string = 'WebApp', appVersion: number = 0, packageName?: string, options?: any): AxiosPromise<CanIOpenCamera200Response> {
            return localVarFp.canIOpenCamera(appName, appVersion, packageName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查更新
         * @param {string} [packageName] 
         * @param {number} [appType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUpdate(packageName?: string, appType?: number, options?: any): AxiosPromise<CheckUpdate200Response> {
            return localVarFp.checkUpdate(packageName, appType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取订阅课程
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesSubscribed(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<CoursesSubscribed200Response> {
            return localVarFp.coursesSubscribed(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生成OSS令牌
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatorToken(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GeneratorToken200Response> {
            return localVarFp.generatorToken(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 不知道是干什么的(^^;
         * @summary 获取共同的网址
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommonWebSite(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetAllCommonWebSite200Response> {
            return localVarFp.getAllCommonWebSite(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSettings(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetAllSettings200Response> {
            return localVarFp.getAllSettings(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取白名单
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWhiteUrlAsync(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetAllWhiteUrlAsync200Response> {
            return localVarFp.getAllWhiteUrlAsync(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetMyMessageListRequest} [getMyMessageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMessageList(appName: string = 'WebApp', appVersion: number = 0, getMyMessageListRequest?: GetMyMessageListRequest, options?: any): AxiosPromise<GetMyMessageList200Response> {
            return localVarFp.getMyMessageList(appName, appVersion, getMyMessageListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取未读消息列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUnreadMessageCount(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetMyUnreadMessageCount200Response> {
            return localVarFp.getMyUnreadMessageCount(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取通知
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotice(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: any): AxiosPromise<GetNotice200Response> {
            return localVarFp.getNotice(appName, appVersion, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取学生设置
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSettingsForStudent(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetSystemSettingsForStudent200Response> {
            return localVarFp.getSystemSettingsForStudent(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 登陆
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 记录图片
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {RecordPicturesRequest} [recordPicturesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPictures(appName: string = 'WebApp', appVersion: number = 0, recordPicturesRequest?: RecordPicturesRequest, options?: any): AxiosPromise<RecordPictures200Response> {
            return localVarFp.recordPictures(appName, appVersion, recordPicturesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置消息已读
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [messageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMessageRead(appName: string = 'WebApp', appVersion: number = 0, messageId?: number, options?: any): AxiosPromise<SetMessageRead200Response> {
            return localVarFp.setMessageRead(appName, appVersion, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 刷新token
         * @param {string} refreshToken refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenAuthRefreshTokenPost(refreshToken: string, options?: any): AxiosPromise<TokenAuthRefreshTokenPost200Response> {
            return localVarFp.tokenAuthRefreshTokenPost(refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManageApi - object-oriented interface
 * @export
 * @class ManageApi
 * @extends {BaseAPI}
 */
export class ManageApi extends BaseAPI {
    /**
     * 
     * @summary 获取打开摄像头权限
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} [packageName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public canIOpenCamera(appName: string = 'WebApp', appVersion: number = 0, packageName?: string, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).canIOpenCamera(appName, appVersion, packageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查更新
     * @param {string} [packageName] 
     * @param {number} [appType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public checkUpdate(packageName?: string, appType?: number, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).checkUpdate(packageName, appType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取订阅课程
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public coursesSubscribed(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).coursesSubscribed(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生成OSS令牌
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public generatorToken(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).generatorToken(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 不知道是干什么的(^^;
     * @summary 获取共同的网址
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getAllCommonWebSite(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getAllCommonWebSite(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有设置
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getAllSettings(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getAllSettings(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取白名单
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getAllWhiteUrlAsync(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getAllWhiteUrlAsync(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取消息列表
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {GetMyMessageListRequest} [getMyMessageListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getMyMessageList(appName: string = 'WebApp', appVersion: number = 0, getMyMessageListRequest?: GetMyMessageListRequest, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getMyMessageList(appName, appVersion, getMyMessageListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取未读消息列表
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getMyUnreadMessageCount(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getMyUnreadMessageCount(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取通知
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getNotice(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getNotice(appName, appVersion, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取学生设置
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public getSystemSettingsForStudent(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).getSystemSettingsForStudent(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 登陆
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 记录图片
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {RecordPicturesRequest} [recordPicturesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public recordPictures(appName: string = 'WebApp', appVersion: number = 0, recordPicturesRequest?: RecordPicturesRequest, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).recordPictures(appName, appVersion, recordPicturesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置消息已读
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} [messageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public setMessageRead(appName: string = 'WebApp', appVersion: number = 0, messageId?: number, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).setMessageRead(appName, appVersion, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 刷新token
     * @param {string} refreshToken refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageApi
     */
    public tokenAuthRefreshTokenPost(refreshToken: string, options?: RawAxiosRequestConfig) {
        return ManageApiFp(this.configuration).tokenAuthRefreshTokenPost(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MiscApi - axios parameter creator
 * @export
 */
export const MiscApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取懂你100URL
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [clientType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDnUrl: async (appName: string = 'WebApp', appVersion: number = 0, clientType?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getDnUrl', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getDnUrl', 'appVersion', appVersion)
            const localVarPath = `/dn/GetDnUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (clientType !== undefined) {
                localVarQueryParameter['clientType'] = clientType;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取三天天气
         * @summary 获取天气信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [location] 位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQWeather: async (appName: string = 'WebApp', appVersion: number = 0, location?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getQWeather', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getQWeather', 'appVersion', appVersion)
            const localVarPath = `/services/app/Weather/GetQWeatherAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MiscApi - functional programming interface
 * @export
 */
export const MiscApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MiscApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取懂你100URL
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [clientType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDnUrl(appName: string = 'WebApp', appVersion: number = 0, clientType?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDnUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDnUrl(appName, appVersion, clientType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.getDnUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取三天天气
         * @summary 获取天气信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [location] 位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQWeather(appName: string = 'WebApp', appVersion: number = 0, location?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQWeather200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQWeather(appName, appVersion, location, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MiscApi.getQWeather']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MiscApi - factory interface
 * @export
 */
export const MiscApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MiscApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取懂你100URL
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [clientType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDnUrl(appName: string = 'WebApp', appVersion: number = 0, clientType?: number, options?: any): AxiosPromise<GetDnUrl200Response> {
            return localVarFp.getDnUrl(appName, appVersion, clientType, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取三天天气
         * @summary 获取天气信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} [location] 位置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQWeather(appName: string = 'WebApp', appVersion: number = 0, location?: string, options?: any): AxiosPromise<GetQWeather200Response> {
            return localVarFp.getQWeather(appName, appVersion, location, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export class MiscApi extends BaseAPI {
    /**
     * 
     * @summary 获取懂你100URL
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} [clientType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getDnUrl(appName: string = 'WebApp', appVersion: number = 0, clientType?: number, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).getDnUrl(appName, appVersion, clientType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取三天天气
     * @summary 获取天气信息
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} [location] 位置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    public getQWeather(appName: string = 'WebApp', appVersion: number = 0, location?: string, options?: RawAxiosRequestConfig) {
        return MiscApiFp(this.configuration).getQWeather(appName, appVersion, location, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MistakeApi - axios parameter creator
 * @export
 */
export const MistakeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取错题问题信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [itemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMistakeQstItemDetailInfo: async (appName: string = 'WebApp', appVersion: number = 0, itemId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getMistakeQstItemDetailInfo', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getMistakeQstItemDetailInfo', 'appVersion', appVersion)
            const localVarPath = `/services/app/MistakeBook/GetMistakeQstItemDetailInfoAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取错题本
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMistakeBooks: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getMyMistakeBooks', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getMyMistakeBooks', 'appVersion', appVersion)
            const localVarPath = `/services/app/MistakeBook/GetMyMistakeBooksAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取标签
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTags: async (appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getMyTags', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getMyTags', 'appVersion', appVersion)
            const localVarPath = `/services/app/MistakeBook/GetMyTags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除多个错题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {MultiRemoveMistakeItemsRequest} [multiRemoveMistakeItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multiRemoveMistakeItems: async (appName: string = 'WebApp', appVersion: number = 0, multiRemoveMistakeItemsRequest?: MultiRemoveMistakeItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('multiRemoveMistakeItems', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('multiRemoveMistakeItems', 'appVersion', appVersion)
            const localVarPath = `/services/app/MistakeBook/MultiRemoveMistakeItemsAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multiRemoveMistakeItemsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 搜索错题问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchMistakeQstItemsRequest} [searchMistakeQstItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMistakeQstItems: async (appName: string = 'WebApp', appVersion: number = 0, searchMistakeQstItemsRequest?: SearchMistakeQstItemsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('searchMistakeQstItems', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('searchMistakeQstItems', 'appVersion', appVersion)
            const localVarPath = `/services/app/MistakeBook/SearchMistakeQstItemsAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchMistakeQstItemsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MistakeApi - functional programming interface
 * @export
 */
export const MistakeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MistakeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取错题问题信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [itemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMistakeQstItemDetailInfo(appName: string = 'WebApp', appVersion: number = 0, itemId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMistakeQstItemDetailInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMistakeQstItemDetailInfo(appName, appVersion, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MistakeApi.getMistakeQstItemDetailInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取错题本
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyMistakeBooks(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyMistakeBooks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyMistakeBooks(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MistakeApi.getMyMistakeBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取标签
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTags(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyTags200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTags(appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MistakeApi.getMyTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 移除多个错题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {MultiRemoveMistakeItemsRequest} [multiRemoveMistakeItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multiRemoveMistakeItems(appName: string = 'WebApp', appVersion: number = 0, multiRemoveMistakeItemsRequest?: MultiRemoveMistakeItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDnUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multiRemoveMistakeItems(appName, appVersion, multiRemoveMistakeItemsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MistakeApi.multiRemoveMistakeItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 搜索错题问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchMistakeQstItemsRequest} [searchMistakeQstItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMistakeQstItems(appName: string = 'WebApp', appVersion: number = 0, searchMistakeQstItemsRequest?: SearchMistakeQstItemsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchMistakeQstItems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMistakeQstItems(appName, appVersion, searchMistakeQstItemsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MistakeApi.searchMistakeQstItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MistakeApi - factory interface
 * @export
 */
export const MistakeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MistakeApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取错题问题信息
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [itemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMistakeQstItemDetailInfo(appName: string = 'WebApp', appVersion: number = 0, itemId?: number, options?: any): AxiosPromise<GetMistakeQstItemDetailInfo200Response> {
            return localVarFp.getMistakeQstItemDetailInfo(appName, appVersion, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取错题本
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMistakeBooks(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetMyMistakeBooks200Response> {
            return localVarFp.getMyMistakeBooks(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取标签
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTags(appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetMyTags200Response> {
            return localVarFp.getMyTags(appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除多个错题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {MultiRemoveMistakeItemsRequest} [multiRemoveMistakeItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multiRemoveMistakeItems(appName: string = 'WebApp', appVersion: number = 0, multiRemoveMistakeItemsRequest?: MultiRemoveMistakeItemsRequest, options?: any): AxiosPromise<GetDnUrl200Response> {
            return localVarFp.multiRemoveMistakeItems(appName, appVersion, multiRemoveMistakeItemsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 搜索错题问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchMistakeQstItemsRequest} [searchMistakeQstItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMistakeQstItems(appName: string = 'WebApp', appVersion: number = 0, searchMistakeQstItemsRequest?: SearchMistakeQstItemsRequest, options?: any): AxiosPromise<SearchMistakeQstItems200Response> {
            return localVarFp.searchMistakeQstItems(appName, appVersion, searchMistakeQstItemsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MistakeApi - object-oriented interface
 * @export
 * @class MistakeApi
 * @extends {BaseAPI}
 */
export class MistakeApi extends BaseAPI {
    /**
     * 
     * @summary 获取错题问题信息
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} [itemId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MistakeApi
     */
    public getMistakeQstItemDetailInfo(appName: string = 'WebApp', appVersion: number = 0, itemId?: number, options?: RawAxiosRequestConfig) {
        return MistakeApiFp(this.configuration).getMistakeQstItemDetailInfo(appName, appVersion, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取错题本
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MistakeApi
     */
    public getMyMistakeBooks(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return MistakeApiFp(this.configuration).getMyMistakeBooks(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取标签
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MistakeApi
     */
    public getMyTags(appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return MistakeApiFp(this.configuration).getMyTags(appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除多个错题
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {MultiRemoveMistakeItemsRequest} [multiRemoveMistakeItemsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MistakeApi
     */
    public multiRemoveMistakeItems(appName: string = 'WebApp', appVersion: number = 0, multiRemoveMistakeItemsRequest?: MultiRemoveMistakeItemsRequest, options?: RawAxiosRequestConfig) {
        return MistakeApiFp(this.configuration).multiRemoveMistakeItems(appName, appVersion, multiRemoveMistakeItemsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 搜索错题问题
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {SearchMistakeQstItemsRequest} [searchMistakeQstItemsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MistakeApi
     */
    public searchMistakeQstItems(appName: string = 'WebApp', appVersion: number = 0, searchMistakeQstItemsRequest?: SearchMistakeQstItemsRequest, options?: RawAxiosRequestConfig) {
        return MistakeApiFp(this.configuration).searchMistakeQstItems(appName, appVersion, searchMistakeQstItemsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuoraApi - axios parameter creator
 * @export
 */
export const QuoraApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新建目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {AddCatalogRequest} [addCatalogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCatalog: async (appName: string = 'WebApp', appVersion: number = 0, addCatalogRequest?: AddCatalogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('addCatalog', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('addCatalog', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/AddCatalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCatalogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (appName: string = 'WebApp', appVersion: number = 0, createSessionRequest?: CreateSessionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('createSession', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('createSession', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/CreateSession`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalog: async (appName: string = 'WebApp', appVersion: number = 0, id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('deleteCatalog', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('deleteCatalog', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/DeleteCatalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/app/Quora/GetCatalogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetQuoraStudentTopicsRequest} [getQuoraStudentTopicsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuoraStudentTopics: async (appName: string = 'WebApp', appVersion: number = 0, getQuoraStudentTopicsRequest?: GetQuoraStudentTopicsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getQuoraStudentTopics', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getQuoraStudentTopics', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/GetQuoraStudentTopicsAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getQuoraStudentTopicsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetSessionsRequest} [getSessionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: async (appName: string = 'WebApp', appVersion: number = 0, getSessionsRequest?: GetSessionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getSessions', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getSessions', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/GetSessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSessionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 搜索问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchQuoraRequest} [searchQuoraRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQuora: async (appName: string = 'WebApp', appVersion: number = 0, searchQuoraRequest?: SearchQuoraRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('searchQuora', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('searchQuora', 'appVersion', appVersion)
            const localVarPath = `/services/app/Quora/SearchQuora`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuoraRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoraApi - functional programming interface
 * @export
 */
export const QuoraApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoraApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 新建目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {AddCatalogRequest} [addCatalogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCatalog(appName: string = 'WebApp', appVersion: number = 0, addCatalogRequest?: AddCatalogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCatalog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCatalog(appName, appVersion, addCatalogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.addCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(appName: string = 'WebApp', appVersion: number = 0, createSessionRequest?: CreateSessionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSession200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(appName, appVersion, createSessionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCatalog(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetMessageRead200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCatalog(appName, appVersion, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.deleteCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatalogs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.getCatalogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetQuoraStudentTopicsRequest} [getQuoraStudentTopicsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuoraStudentTopics(appName: string = 'WebApp', appVersion: number = 0, getQuoraStudentTopicsRequest?: GetQuoraStudentTopicsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuoraStudentTopics(appName, appVersion, getQuoraStudentTopicsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.getQuoraStudentTopics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetSessionsRequest} [getSessionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessions(appName: string = 'WebApp', appVersion: number = 0, getSessionsRequest?: GetSessionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSessions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessions(appName, appVersion, getSessionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.getSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 搜索问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchQuoraRequest} [searchQuoraRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchQuora(appName: string = 'WebApp', appVersion: number = 0, searchQuoraRequest?: SearchQuoraRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchQuora200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchQuora(appName, appVersion, searchQuoraRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuoraApi.searchQuora']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuoraApi - factory interface
 * @export
 */
export const QuoraApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoraApiFp(configuration)
    return {
        /**
         * 
         * @summary 新建目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {AddCatalogRequest} [addCatalogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCatalog(appName: string = 'WebApp', appVersion: number = 0, addCatalogRequest?: AddCatalogRequest, options?: any): AxiosPromise<AddCatalog200Response> {
            return localVarFp.addCatalog(appName, appVersion, addCatalogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(appName: string = 'WebApp', appVersion: number = 0, createSessionRequest?: CreateSessionRequest, options?: any): AxiosPromise<CreateSession200Response> {
            return localVarFp.createSession(appName, appVersion, createSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除目录
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalog(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: any): AxiosPromise<SetMessageRead200Response> {
            return localVarFp.deleteCatalog(appName, appVersion, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogs(options?: any): AxiosPromise<GetCatalogs200Response> {
            return localVarFp.getCatalogs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetQuoraStudentTopicsRequest} [getQuoraStudentTopicsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuoraStudentTopics(appName: string = 'WebApp', appVersion: number = 0, getQuoraStudentTopicsRequest?: GetQuoraStudentTopicsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.getQuoraStudentTopics(appName, appVersion, getQuoraStudentTopicsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取随身答
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetSessionsRequest} [getSessionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions(appName: string = 'WebApp', appVersion: number = 0, getSessionsRequest?: GetSessionsRequest, options?: any): AxiosPromise<GetSessions200Response> {
            return localVarFp.getSessions(appName, appVersion, getSessionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 搜索问题
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {SearchQuoraRequest} [searchQuoraRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchQuora(appName: string = 'WebApp', appVersion: number = 0, searchQuoraRequest?: SearchQuoraRequest, options?: any): AxiosPromise<SearchQuora200Response> {
            return localVarFp.searchQuora(appName, appVersion, searchQuoraRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuoraApi - object-oriented interface
 * @export
 * @class QuoraApi
 * @extends {BaseAPI}
 */
export class QuoraApi extends BaseAPI {
    /**
     * 
     * @summary 新建目录
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {AddCatalogRequest} [addCatalogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public addCatalog(appName: string = 'WebApp', appVersion: number = 0, addCatalogRequest?: AddCatalogRequest, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).addCatalog(appName, appVersion, addCatalogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建随身答
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {CreateSessionRequest} [createSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public createSession(appName: string = 'WebApp', appVersion: number = 0, createSessionRequest?: CreateSessionRequest, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).createSession(appName, appVersion, createSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除目录
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public deleteCatalog(appName: string = 'WebApp', appVersion: number = 0, id?: number, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).deleteCatalog(appName, appVersion, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取目录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public getCatalogs(options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).getCatalogs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取随身答
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {GetQuoraStudentTopicsRequest} [getQuoraStudentTopicsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public getQuoraStudentTopics(appName: string = 'WebApp', appVersion: number = 0, getQuoraStudentTopicsRequest?: GetQuoraStudentTopicsRequest, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).getQuoraStudentTopics(appName, appVersion, getQuoraStudentTopicsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取随身答
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {GetSessionsRequest} [getSessionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public getSessions(appName: string = 'WebApp', appVersion: number = 0, getSessionsRequest?: GetSessionsRequest, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).getSessions(appName, appVersion, getSessionsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 搜索问题
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {SearchQuoraRequest} [searchQuoraRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoraApi
     */
    public searchQuora(appName: string = 'WebApp', appVersion: number = 0, searchQuoraRequest?: SearchQuoraRequest, options?: RawAxiosRequestConfig) {
        return QuoraApiFp(this.configuration).searchQuora(appName, appVersion, searchQuoraRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {AskForHelpRequest} [askForHelpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForHelp: async (appVersion: number = 0, appName: string = 'WebApp', askForHelpRequest?: AskForHelpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('askForHelp', 'appVersion', appVersion)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('askForHelp', 'appName', appName)
            const localVarPath = `/services/app/Task/AskForHelpAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(askForHelpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} id 
         * @param {boolean} isRevising 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: async (appVersion: number = 0, appName: string = 'WebApp', id: number, isRevising: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('complete', 'appVersion', appVersion)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('complete', 'appName', appName)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('complete', 'id', id)
            // verify required parameter 'isRevising' is not null or undefined
            assertParamExists('complete', 'isRevising', isRevising)
            const localVarPath = `/services/app/Task/CompleteAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (isRevising !== undefined) {
                localVarQueryParameter['isRevising'] = isRevising;
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} [taskId] 
         * @param {ExamAnswerRequest} [examAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        examAnswer: async (appVersion: number = 0, appName: string = 'WebApp', taskId?: number, examAnswerRequest?: ExamAnswerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('examAnswer', 'appVersion', appVersion)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('examAnswer', 'appName', appName)
            const localVarPath = `/services/app/Task/ExamAnswerAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(examAnswerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamTask: async (appName: string = 'WebApp', appVersion: number = 0, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getExamTask', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getExamTask', 'appVersion', appVersion)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExamTask', 'id', id)
            const localVarPath = `/services/app/Task/GetExamTaskAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoQstExam: async (id: number, appName: string = 'WebApp', appVersion: number = 0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNoQstExam', 'id', id)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getNoQstExam', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getNoQstExam', 'appVersion', appVersion)
            const localVarPath = `/services/app/Task/GetNoQstExamTaskAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} examId 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionView: async (appVersion: number = 0, appName: string = 'WebApp', examId: number, questionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getQuestionView', 'appVersion', appVersion)
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getQuestionView', 'appName', appName)
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('getQuestionView', 'examId', examId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('getQuestionView', 'questionId', questionId)
            const localVarPath = `/services/app/Task/GetQuestionViewAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (examId !== undefined) {
                localVarQueryParameter['examId'] = examId;
            }

            if (questionId !== undefined) {
                localVarQueryParameter['questionId'] = questionId;
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取任务列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetStudentTaskListRequest} [getStudentTaskListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentTaskList: async (appName: string = 'WebApp', appVersion: number = 0, getStudentTaskListRequest?: GetStudentTaskListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getStudentTaskList', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('getStudentTaskList', 'appVersion', appVersion)
            const localVarPath = `/services/app/Task/GetStudentTaskListAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getStudentTaskListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} taskId 
         * @param {Array<NoQstExamAnswerRequestInner>} [noQstExamAnswerRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        noQstExamAnswer: async (appName: string = 'WebApp', appVersion: number = 0, taskId: number, noQstExamAnswerRequestInner?: Array<NoQstExamAnswerRequestInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('noQstExamAnswer', 'appName', appName)
            // verify required parameter 'appVersion' is not null or undefined
            assertParamExists('noQstExamAnswer', 'appVersion', appVersion)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('noQstExamAnswer', 'taskId', taskId)
            const localVarPath = `/services/app/Task/NoQstExamAnswerAsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }

            if (appName != null) {
                localVarHeaderParameter['AppName'] = String(appName);
            }

            if (appVersion != null) {
                localVarHeaderParameter['AppVersion'] = typeof appVersion === 'string'
                    ? appVersion
                    : JSON.stringify(appVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(noQstExamAnswerRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {AskForHelpRequest} [askForHelpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askForHelp(appVersion: number = 0, appName: string = 'WebApp', askForHelpRequest?: AskForHelpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AskForHelp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.askForHelp(appVersion, appName, askForHelpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.askForHelp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} id 
         * @param {boolean} isRevising 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complete(appVersion: number = 0, appName: string = 'WebApp', id: number, isRevising: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AskForHelp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complete(appVersion, appName, id, isRevising, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.complete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} [taskId] 
         * @param {ExamAnswerRequest} [examAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async examAnswer(appVersion: number = 0, appName: string = 'WebApp', taskId?: number, examAnswerRequest?: ExamAnswerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AskForHelp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.examAnswer(appVersion, appName, taskId, examAnswerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.examAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExamTask(appName: string = 'WebApp', appVersion: number = 0, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExamTask200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExamTask(appName, appVersion, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getExamTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoQstExam(id: number, appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNoQstExam200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNoQstExam(id, appName, appVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getNoQstExam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} examId 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionView(appVersion: number = 0, appName: string = 'WebApp', examId: number, questionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuestionView200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionView(appVersion, appName, examId, questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getQuestionView']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取任务列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetStudentTaskListRequest} [getStudentTaskListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentTaskList(appName: string = 'WebApp', appVersion: number = 0, getStudentTaskListRequest?: GetStudentTaskListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStudentTaskList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentTaskList(appName, appVersion, getStudentTaskListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.getStudentTaskList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} taskId 
         * @param {Array<NoQstExamAnswerRequestInner>} [noQstExamAnswerRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async noQstExamAnswer(appName: string = 'WebApp', appVersion: number = 0, taskId: number, noQstExamAnswerRequestInner?: Array<NoQstExamAnswerRequestInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AskForHelp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.noQstExamAnswer(appName, appVersion, taskId, noQstExamAnswerRequestInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.noQstExamAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {AskForHelpRequest} [askForHelpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForHelp(appVersion: number = 0, appName: string = 'WebApp', askForHelpRequest?: AskForHelpRequest, options?: any): AxiosPromise<AskForHelp200Response> {
            return localVarFp.askForHelp(appVersion, appName, askForHelpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} id 
         * @param {boolean} isRevising 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete(appVersion: number = 0, appName: string = 'WebApp', id: number, isRevising: boolean, options?: any): AxiosPromise<AskForHelp200Response> {
            return localVarFp.complete(appVersion, appName, id, isRevising, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} [taskId] 
         * @param {ExamAnswerRequest} [examAnswerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        examAnswer(appVersion: number = 0, appName: string = 'WebApp', taskId?: number, examAnswerRequest?: ExamAnswerRequest, options?: any): AxiosPromise<AskForHelp200Response> {
            return localVarFp.examAnswer(appVersion, appName, taskId, examAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamTask(appName: string = 'WebApp', appVersion: number = 0, id: number, options?: any): AxiosPromise<GetExamTask200Response> {
            return localVarFp.getExamTask(appName, appVersion, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoQstExam(id: number, appName: string = 'WebApp', appVersion: number = 0, options?: any): AxiosPromise<GetNoQstExam200Response> {
            return localVarFp.getNoQstExam(id, appName, appVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} appVersion 请求api的应用的版本
         * @param {string} appName 请求api的应用的包名
         * @param {number} examId 
         * @param {number} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionView(appVersion: number = 0, appName: string = 'WebApp', examId: number, questionId: number, options?: any): AxiosPromise<GetQuestionView200Response> {
            return localVarFp.getQuestionView(appVersion, appName, examId, questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取任务列表
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {GetStudentTaskListRequest} [getStudentTaskListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentTaskList(appName: string = 'WebApp', appVersion: number = 0, getStudentTaskListRequest?: GetStudentTaskListRequest, options?: any): AxiosPromise<GetStudentTaskList200Response> {
            return localVarFp.getStudentTaskList(appName, appVersion, getStudentTaskListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appName 请求api的应用的包名
         * @param {number} appVersion 请求api的应用的版本
         * @param {number} taskId 
         * @param {Array<NoQstExamAnswerRequestInner>} [noQstExamAnswerRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        noQstExamAnswer(appName: string = 'WebApp', appVersion: number = 0, taskId: number, noQstExamAnswerRequestInner?: Array<NoQstExamAnswerRequestInner>, options?: any): AxiosPromise<AskForHelp200Response> {
            return localVarFp.noQstExamAnswer(appName, appVersion, taskId, noQstExamAnswerRequestInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} appName 请求api的应用的包名
     * @param {AskForHelpRequest} [askForHelpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public askForHelp(appVersion: number = 0, appName: string = 'WebApp', askForHelpRequest?: AskForHelpRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).askForHelp(appVersion, appName, askForHelpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} appName 请求api的应用的包名
     * @param {number} id 
     * @param {boolean} isRevising 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public complete(appVersion: number = 0, appName: string = 'WebApp', id: number, isRevising: boolean, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).complete(appVersion, appName, id, isRevising, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} appName 请求api的应用的包名
     * @param {number} [taskId] 
     * @param {ExamAnswerRequest} [examAnswerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public examAnswer(appVersion: number = 0, appName: string = 'WebApp', taskId?: number, examAnswerRequest?: ExamAnswerRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).examAnswer(appVersion, appName, taskId, examAnswerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getExamTask(appName: string = 'WebApp', appVersion: number = 0, id: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getExamTask(appName, appVersion, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getNoQstExam(id: number, appName: string = 'WebApp', appVersion: number = 0, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getNoQstExam(id, appName, appVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} appVersion 请求api的应用的版本
     * @param {string} appName 请求api的应用的包名
     * @param {number} examId 
     * @param {number} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getQuestionView(appVersion: number = 0, appName: string = 'WebApp', examId: number, questionId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getQuestionView(appVersion, appName, examId, questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取任务列表
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {GetStudentTaskListRequest} [getStudentTaskListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getStudentTaskList(appName: string = 'WebApp', appVersion: number = 0, getStudentTaskListRequest?: GetStudentTaskListRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getStudentTaskList(appName, appVersion, getStudentTaskListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appName 请求api的应用的包名
     * @param {number} appVersion 请求api的应用的版本
     * @param {number} taskId 
     * @param {Array<NoQstExamAnswerRequestInner>} [noQstExamAnswerRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public noQstExamAnswer(appName: string = 'WebApp', appVersion: number = 0, taskId: number, noQstExamAnswerRequestInner?: Array<NoQstExamAnswerRequestInner>, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).noQstExamAnswer(appName, appVersion, taskId, noQstExamAnswerRequestInner, options).then((request) => request(this.axios, this.basePath));
    }
}



